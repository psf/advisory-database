"""Tool which imports OSV data from PSF CVE Numbering Authority CVEs"""

import json
import re
import sys
from pathlib import Path

import osv_utils
import urllib3

http = urllib3.PoolManager()
ADVISORIES_DIR = Path(__file__).parent.parent / "advisories"


def main():
    fetch_osv_from_cve(sys.argv[1])


def fetch_osv_from_cve(cve_id):
    # Fetch the CVE JSON from the GitHub mirror.
    CVE, year, id = cve_id.split("-")
    assert CVE == "CVE", cve_id
    id_prefix = id[:-3] + "xxx"
    resp = http.request(
        "GET",
        f"https://raw.githubusercontent.com/CVEProject/cvelistV5/main/cves/{year}/{id_prefix}/{cve_id}.json",
    )
    if resp.status == 404:
        return
    assert resp.status == 200, resp.status
    cve_json = resp.json()
    cve_cna = cve_json["containers"]["cna"]
    cve_meta = cve_json["cveMetadata"]

    details = None
    if "descriptions" in cve_cna:
        assert cve_cna["descriptions"][0]["lang"] == "en"
        details = cve_cna["descriptions"][0]["value"]

    cwe_ids = []
    for problem_type in cve_cna.get("problemTypes", []):
        cwe_ids.extend(problem_type.get("cwdId", []))

    osv_id = osv_utils.get_osv_id(
        "python", lambda osv: cve_id in osv.get("aliases", ())
    )
    if not osv_id:
        osv_id = f"PSF-0000-{cve_id}"
    osv_json = {
        "schema_version": "1.5.0",
        "id": osv_id,
        "aliases": [cve_id],
        "published": f"{cve_meta['datePublished']}Z",
        "modified": f"{cve_meta['dateUpdated']}Z",
        "details": details,
        "database_specific": {"cwe_ids": cwe_ids},
    }

    fixed_events = []
    references = []
    for ref in cve_cna["references"]:
        ref_tags = ref.get("tags", ())
        ref_type = "WEB"
        if "patch" in ref_tags:
            ref_type = "FIX"
            fixed_events.append(
                {
                    "fixed": re.search(
                        r"https://github.com/python/cpython/commit/([a-f0-9]{20,})",
                        ref["url"],
                    ).group(1)
                }
            )
        elif "vendor-advisory" in ref_tags:
            ref_type = "ADVISORY"
        elif "issue-tracking" in ref_tags:
            ref_type = "REPORT"
        references.append({"type": ref_type, "url": ref["url"]})

    osv_json["affected"] = [
        {
            "ranges": [
                {
                    "type": "GIT",
                    "repo": "https://github.com/python/cpython",
                    "events": [{"introduced": "0"}, *fixed_events],
                }
            ]
        }
    ]
    osv_json["references"] = references

    with (ADVISORIES_DIR / f"python/{osv_id}.json").open("w") as f:
        f.truncate()
        f.write(json.dumps(osv_json, indent=2))


if __name__ == "__main__":
    main()
